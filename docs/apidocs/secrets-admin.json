{
  "apiVersion" : "1",
  "swaggerVersion" : "1.2",
  "basePath" : "https://square.github.io/keywhiz/apidocs",
  "resourcePath" : "/secrets-admin",
  "apis" : [ {
    "path" : "/admin/secrets",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "findSecrets",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "description" : "the name of the Secret to retrieve, if provided",
        "defaultValue" : "",
        "paramType" : "query",
        "name" : "name"
      }, {
        "type" : "string",
        "description" : "if set, the result only contains the id and name for the secrets.",
        "defaultValue" : "",
        "paramType" : "query",
        "name" : "nameOnly"
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "if set, the desired starting index in a list of secrets to be retrieved",
        "paramType" : "query",
        "name" : "idx"
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "if set, the number of secrets to retrieve",
        "paramType" : "query",
        "name" : "num"
      }, {
        "type" : "boolean",
        "description" : "whether to order the secrets by creation date with newest first; defaults to true",
        "defaultValue" : "true",
        "paramType" : "query",
        "name" : "newestFirst"
      } ],
      "summary" : "Retrieve Secret by a specified name and version, or all Secrets if name is not given",
      "notes" : "Returns a single Secret or a set of all Secrets for this user.\n Used by Keywhiz CLI and the web ui.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Found and retrieved Secret(s)"
      }, {
        "code" : 404,
        "message" : "Secret with given name not found (if name provided)"
      } ],
      "produces" : [ "application/json" ]
    }, {
      "method" : "POST",
      "nickname" : "createSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "CreateSecretRequest",
        "description" : "the JSON client request used to formulate the Secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Create Secret",
      "notes" : "Creates a Secret with the name from a valid secret request.\n Used by Keywhiz CLI and the web ui.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Successfully created Secret"
      }, {
        "code" : 400,
        "message" : "Secret with given name already exists"
      } ],
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/admin/secrets/rollback/{secretName}/{versionId}",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "resetSecretVersion",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "description" : "the name of the secret to rollback",
        "paramType" : "path",
        "name" : "secretName",
        "required" : true
      }, {
        "type" : "LongParam",
        "description" : "the ID of the version to return to",
        "paramType" : "path",
        "name" : "versionId",
        "required" : true
      } ],
      "summary" : "Rollback to a previous secret version",
      "notes" : "Returns the previous versions of the secret if found Used by Keywhiz CLI.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Found and reset the secret to this version"
      }, {
        "code" : 404,
        "message" : "Secret with given name not found or invalid version provided"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/admin/secrets/versions/{name}",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretVersions",
      "type" : "array",
      "items" : {
        "$ref" : "SanitizedSecret"
      },
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "The index in the list of versions of the first version to retrieve",
        "paramType" : "query",
        "name" : "versionIdx"
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "The number of versions to retrieve",
        "paramType" : "query",
        "name" : "numVersions"
      } ],
      "summary" : "Retrieve the given range of versions of this secret, sorted from newest to\n oldest update time.",
      "notes" : "If versionIdx is nonzero, then numVersions versions,\n starting from versionIdx in the list and increasing in index, will be\n returned (set numVersions to a very large number to retrieve all versions).\n For instance, versionIdx = 5 and numVersions = 10 will retrieve entries\n at indices 5 through 14.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Secret series information retrieved"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/admin/secrets/{name}",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "createOrUpdateSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "CreateOrUpdateSecretRequestV2",
        "description" : "the JSON client request used to formulate the Secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Create or update secret",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Successfully created Secret"
      } ],
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/admin/secrets/{name}/partialupdate",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "partialUpdateSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "PartialUpdateSecretRequestV2",
        "description" : "the JSON client request used to formulate the Secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Update a subset of the fields of an existing secret",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Successfully updated Secret"
      } ],
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/admin/secrets/{secretId}",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "retrieveSecret",
      "type" : "SecretDetailResponse",
      "parameters" : [ {
        "type" : "LongParam",
        "description" : "the ID of the secret to retrieve",
        "paramType" : "path",
        "name" : "secretId",
        "required" : true
      } ],
      "summary" : "Retrieve Secret by ID",
      "notes" : "Returns a single Secret if found.\n Used by Keywhiz CLI and the web ui.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Found and retrieved Secret with given ID"
      }, {
        "code" : 404,
        "message" : "Secret with given ID not Found"
      } ],
      "produces" : [ "application/json" ]
    }, {
      "method" : "DELETE",
      "nickname" : "deleteSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "LongParam",
        "description" : "the ID of the Secret to be deleted",
        "paramType" : "path",
        "name" : "secretId",
        "required" : true
      } ],
      "summary" : "Delete Secret by ID",
      "notes" : "Deletes a single Secret if found.\n Used by Keywhiz CLI and the web ui.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Found and deleted Secret with given ID"
      }, {
        "code" : 404,
        "message" : "Secret with given ID not Found"
      } ],
      "produces" : [ "application/json" ]
    } ]
  } ],
  "models" : {
    "Group" : {
      "id" : "Group",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "ApiDate"
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedAt" : {
          "type" : "ApiDate"
        },
        "updatedBy" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        }
      }
    },
    "SanitizedSecret" : {
      "id" : "SanitizedSecret",
      "properties" : { }
    },
    "ApiDate" : {
      "id" : "ApiDate",
      "properties" : {
        "epochSecond" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "CreateSecretRequest" : {
      "id" : "CreateSecretRequest",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "PartialUpdateSecretRequestV2" : {
      "id" : "PartialUpdateSecretRequestV2",
      "properties" : {
        "contentPresent" : {
          "type" : "boolean"
        },
        "content" : {
          "type" : "string"
        },
        "descriptionPresent" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string"
        },
        "metadataPresent" : {
          "type" : "boolean"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "expiryPresent" : {
          "type" : "boolean"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "typePresent" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "LongParam" : {
      "id" : "LongParam",
      "properties" : {
        "value" : {
          "type" : "T"
        },
        "errorStatus" : {
          "type" : "string",
          "enum" : [ "OK", "CREATED", "ACCEPTED", "NO_CONTENT", "RESET_CONTENT", "PARTIAL_CONTENT", "MOVED_PERMANENTLY", "FOUND", "SEE_OTHER", "NOT_MODIFIED", "USE_PROXY", "TEMPORARY_REDIRECT", "BAD_REQUEST", "UNAUTHORIZED", "PAYMENT_REQUIRED", "FORBIDDEN", "NOT_FOUND", "METHOD_NOT_ALLOWED", "NOT_ACCEPTABLE", "PROXY_AUTHENTICATION_REQUIRED", "REQUEST_TIMEOUT", "CONFLICT", "GONE", "LENGTH_REQUIRED", "PRECONDITION_FAILED", "REQUEST_ENTITY_TOO_LARGE", "REQUEST_URI_TOO_LONG", "UNSUPPORTED_MEDIA_TYPE", "REQUESTED_RANGE_NOT_SATISFIABLE", "EXPECTATION_FAILED", "INTERNAL_SERVER_ERROR", "NOT_IMPLEMENTED", "BAD_GATEWAY", "SERVICE_UNAVAILABLE", "GATEWAY_TIMEOUT", "HTTP_VERSION_NOT_SUPPORTED" ]
        }
      }
    },
    "SecretDetailResponse" : {
      "id" : "SecretDetailResponse",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "ApiDate"
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedAt" : {
          "type" : "ApiDate"
        },
        "updatedBy" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "Group"
          }
        },
        "clients" : {
          "type" : "array",
          "items" : {
            "$ref" : "Client"
          }
        }
      }
    },
    "CreateOrUpdateSecretRequestV2" : {
      "id" : "CreateOrUpdateSecretRequestV2",
      "properties" : {
        "content" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "Client" : {
      "id" : "Client",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "ApiDate"
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedAt" : {
          "type" : "ApiDate"
        },
        "updatedBy" : {
          "type" : "string"
        },
        "lastSeen" : {
          "type" : "ApiDate"
        },
        "expiration" : {
          "type" : "ApiDate"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "automationAllowed" : {
          "type" : "boolean"
        }
      }
    }
  }
}
