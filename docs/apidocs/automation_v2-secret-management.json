{
  "apiVersion" : "1",
  "swaggerVersion" : "1.2",
  "basePath" : "https://square.github.io/keywhiz/apidocs",
  "resourcePath" : "/automation/v2-secret-management",
  "apis" : [ {
    "path" : "/automation/v2/secrets",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "createSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "CreateSecretRequestV2",
        "description" : "JSON request to create a secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Creates a secret and assigns to given groups",
      "responseMessages" : [ {
        "code" : 201,
        "message" : "Created secret and assigned to given groups"
      }, {
        "code" : 409,
        "message" : "Secret already exists"
      } ],
      "consumes" : [ "application/json" ]
    }, {
      "method" : "GET",
      "nickname" : "secretListing",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "integer",
        "format" : "int32",
        "description" : "the index from which to start retrieval in the list of secret names",
        "paramType" : "query",
        "name" : "idx"
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "the number of names to retrieve",
        "paramType" : "query",
        "name" : "num"
      }, {
        "type" : "boolean",
        "description" : "whether to list the most-recently-created names first",
        "defaultValue" : "true",
        "paramType" : "query",
        "name" : "newestFirst"
      } ],
      "summary" : "Retrieve listing of secret names.",
      "notes" : "If \"idx\" and \"num\" are both provided, retrieve \"num\"\n names starting at \"idx\" from a list of secret names ordered by creation date, with\n order depending on \"newestFirst\" (which defaults to \"true\")",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "List of secret names"
      }, {
        "code" : 400,
        "message" : "Invalid (negative) idx or num"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/expiring/v2/{time}",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretListingExpiringV2",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "integer",
        "format" : "int64",
        "description" : "timestamp for farthest expiry to include",
        "paramType" : "path",
        "name" : "time",
        "required" : true
      } ],
      "summary" : "Retrieve listing of secrets expiring soon",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "List of secrets expiring soon"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/expiring/v3/{time}",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretListingExpiringV3",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "integer",
        "format" : "int64",
        "description" : "timestamp for farthest expiry to include",
        "paramType" : "path",
        "name" : "time",
        "required" : true
      } ],
      "summary" : "Retrieve listing of secrets expiring soon",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "List of secrets expiring soon"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/expiring/{time}",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretListingExpiring",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "integer",
        "format" : "int64",
        "description" : "timestamp for farthest expiry to include",
        "paramType" : "path",
        "name" : "time",
        "required" : true
      } ],
      "summary" : "Retrieve listing of secrets expiring soon",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "List of secrets expiring soon"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/expiring/{time}/{name}",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretListingExpiringForGroup",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "integer",
        "format" : "int64",
        "description" : "timestamp for farthest expiry to include",
        "paramType" : "path",
        "name" : "time",
        "required" : true
      }, {
        "type" : "string",
        "description" : "Group name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      } ],
      "summary" : "Retrieve listing of secrets expiring soon in a group",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "List of secrets expiring soon in group"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/request/contents",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "secretContents",
      "type" : "SecretContentsResponseV2",
      "parameters" : [ {
        "type" : "SecretContentsRequestV2",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Retrieve contents for a set of secret series.",
      "notes" : "Throws an exception\n for unexpected errors (i. e. empty secret names or errors connecting to\n the database); returns a response containing the contents of found\n secrets and a list of any missing secrets.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Secret series information retrieved"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/v2",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretListingV2",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "integer",
        "format" : "int32",
        "description" : "the index from which to start retrieval in the list of secrets",
        "paramType" : "query",
        "name" : "idx"
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "the number of names to retrieve",
        "paramType" : "query",
        "name" : "num"
      }, {
        "type" : "boolean",
        "description" : "whether to list the most-recently-created names first",
        "defaultValue" : "true",
        "paramType" : "query",
        "name" : "newestFirst"
      } ],
      "summary" : "Retrieve listing of secrets.",
      "notes" : "If \"idx\" and \"num\" are both provided, retrieve \"num\"\n names starting at \"idx\" from a list of secrets ordered by creation date, with\n order depending on \"newestFirst\" (which defaults to \"true\")",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "List of secret names"
      }, {
        "code" : 400,
        "message" : "Invalid (negative) idx or num"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "createOrUpdateSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "CreateOrUpdateSecretRequestV2",
        "description" : "JSON request to create a secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Creates or updates (if it exists) a secret.",
      "responseMessages" : [ {
        "code" : 201,
        "message" : "Created secret and assigned to given groups"
      } ],
      "consumes" : [ "application/json" ]
    }, {
      "method" : "GET",
      "nickname" : "secretInfo",
      "type" : "SecretDetailResponseV2",
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      } ],
      "summary" : "Retrieve information on a secret series",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Secret series information retrieved"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ],
      "produces" : [ "application/json" ]
    }, {
      "method" : "DELETE",
      "nickname" : "deleteSecretSeries",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      } ],
      "summary" : "Delete a secret series",
      "responseMessages" : [ {
        "code" : 204,
        "message" : "Secret series deleted"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/backfill-expiration",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "backfillExpiration",
      "type" : "boolean",
      "parameters" : [ {
        "type" : "AutomationClient",
        "paramType" : "body",
        "name" : "automationClient",
        "required" : true
      }, {
        "type" : "string",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "paramType" : "body",
        "name" : "passwords",
        "required" : true
      } ],
      "summary" : "Backfill expiration for this secret.",
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/backfill-hmac",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "backfillHmac",
      "type" : "boolean",
      "parameters" : [ {
        "type" : "AutomationClient",
        "paramType" : "body",
        "name" : "automationClient",
        "required" : true
      }, {
        "type" : "string",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "paramType" : "body",
        "name" : "passwords",
        "required" : true
      } ],
      "summary" : "Backfill content hmac for this secret.",
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/groups",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretGroupsListing",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      } ],
      "summary" : "Listing of groups a secret is assigned to",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Listing succeeded"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ],
      "produces" : [ "application/json" ]
    }, {
      "method" : "PUT",
      "nickname" : "modifySecretGroups",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "ModifyGroupsRequestV2",
        "description" : "JSON request to modify groups",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Modify the groups a secret is assigned to",
      "responseMessages" : [ {
        "code" : 201,
        "message" : "Group membership changed"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ],
      "consumes" : [ "application/json" ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/partialupdate",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "partialUpdateSecret",
      "type" : "Response",
      "parameters" : [ {
        "type" : "string",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "PartialUpdateSecretRequestV2",
        "description" : "JSON request to update a secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Updates a subset of the fields of an existing secret",
      "responseMessages" : [ {
        "code" : 201,
        "message" : "Created secret and assigned to given groups"
      } ],
      "consumes" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/sanitized",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "getSanitizedSecret",
      "type" : "SanitizedSecret",
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      } ],
      "summary" : "Retrieve information on a secret series",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Secret series information retrieved"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ],
      "produces" : [ "application/json" ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/setversion",
    "operations" : [ {
      "method" : "POST",
      "nickname" : "resetSecretVersion",
      "type" : "Response",
      "parameters" : [ {
        "type" : "SetSecretVersionRequestV2",
        "description" : "A request to update a given secret",
        "paramType" : "body",
        "name" : "request",
        "required" : true
      } ],
      "summary" : "Reset the current version of the given secret to the given version index.",
      "responseMessages" : [ {
        "code" : 201,
        "message" : "Secret series current version updated successfully"
      }, {
        "code" : 400,
        "message" : "Invalid secret version specified"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ]
    } ]
  }, {
    "path" : "/automation/v2/secrets/{name}/versions",
    "operations" : [ {
      "method" : "GET",
      "nickname" : "secretVersions",
      "type" : "Iterable",
      "parameters" : [ {
        "type" : "string",
        "description" : "Secret series name",
        "paramType" : "path",
        "name" : "name",
        "required" : true
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "The index in the list of versions of the first version to retrieve",
        "paramType" : "query",
        "name" : "versionIdx"
      }, {
        "type" : "integer",
        "format" : "int32",
        "description" : "The number of versions to retrieve",
        "paramType" : "query",
        "name" : "numVersions"
      } ],
      "summary" : "Retrieve the given range of versions of this secret, sorted from newest to\n oldest update time.",
      "notes" : "If versionIdx is nonzero, then numVersions versions,\n starting from versionIdx in the list and increasing in index, will be\n returned (set numVersions to a very large number to retrieve all versions).\n For instance, versionIdx = 5 and numVersions = 10 will retrieve entries\n at indices 5 through 14.",
      "responseMessages" : [ {
        "code" : 200,
        "message" : "Secret series information retrieved"
      }, {
        "code" : 404,
        "message" : "Secret series not found"
      } ],
      "produces" : [ "application/json" ]
    } ]
  } ],
  "models" : {
    "SetSecretVersionRequestV2" : {
      "id" : "SetSecretVersionRequestV2",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "SanitizedSecret" : {
      "id" : "SanitizedSecret",
      "properties" : { }
    },
    "ApiDate" : {
      "id" : "ApiDate",
      "properties" : {
        "epochSecond" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "SecretContentsRequestV2" : {
      "id" : "SecretContentsRequestV2",
      "properties" : {
        "secrets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "uniqueItems" : true
        }
      }
    },
    "CreateSecretRequestV2" : {
      "id" : "CreateSecretRequestV2",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "type" : {
          "type" : "string"
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "uniqueItems" : true
        }
      }
    },
    "SecretContentsResponseV2" : {
      "id" : "SecretContentsResponseV2",
      "properties" : {
        "successSecrets" : {
          "type" : "ImmutableMap"
        },
        "missingSecrets" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ModifyGroupsRequestV2" : {
      "id" : "ModifyGroupsRequestV2",
      "properties" : {
        "addGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "uniqueItems" : true
        },
        "removeGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "uniqueItems" : true
        }
      }
    },
    "PartialUpdateSecretRequestV2" : {
      "id" : "PartialUpdateSecretRequestV2",
      "properties" : {
        "contentPresent" : {
          "type" : "boolean"
        },
        "content" : {
          "type" : "string"
        },
        "descriptionPresent" : {
          "type" : "boolean"
        },
        "description" : {
          "type" : "string"
        },
        "metadataPresent" : {
          "type" : "boolean"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "expiryPresent" : {
          "type" : "boolean"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "typePresent" : {
          "type" : "boolean"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "CreateOrUpdateSecretRequestV2" : {
      "id" : "CreateOrUpdateSecretRequestV2",
      "properties" : {
        "content" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "AutomationClient" : {
      "id" : "AutomationClient",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "ApiDate"
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedAt" : {
          "type" : "ApiDate"
        },
        "updatedBy" : {
          "type" : "string"
        },
        "lastSeen" : {
          "type" : "ApiDate"
        },
        "expiration" : {
          "type" : "ApiDate"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "automationAllowed" : {
          "type" : "boolean"
        }
      }
    },
    "SecretDetailResponseV2" : {
      "id" : "SecretDetailResponseV2",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "checksum" : {
          "type" : "string"
        },
        "createdAtSeconds" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedAtSeconds" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updatedBy" : {
          "type" : "string"
        },
        "metadata" : {
          "type" : "ImmutableMap"
        },
        "type" : {
          "type" : "string"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "contentCreatedAtSeconds" : {
          "type" : "integer",
          "format" : "int64"
        },
        "contentCreatedBy" : {
          "type" : "string"
        }
      }
    }
  }
}
